import requests
import json
import re

# Função para extrair IDs dos filmes a partir de uma playlist M3U
def extract_movie_ids(playlist_url):
    response = requests.get(playlist_url)
    content = response.text
    # Regex para encontrar todos os tvg-id
    movie_ids = re.findall(r'tvg-id="(\d+)"', content)
    return movie_ids

# URL da playlist M3U (deve ser acessível via HTTP/HTTPS)
playlist_url = 'https://pandoradrv01.ebsp.workers.dev/9:/teste.m3u'

# Extrair os IDs dos filmes da playlist
movie_ids = extract_movie_ids(playlist_url)

# Substitua 'YOUR_API_KEY' pela sua chave da API do TMDb
api_key = '6e2e6889fccce1a5b1d120f2d8f56b8c'
base_url = 'https://api.themoviedb.org/3/movie/'

# Inicializa uma lista para armazenar os dados dos filmes
movies_data = []

for movie_id in movie_ids:
    url = f'{base_url}{movie_id}?api_key={api_key}'
    response = requests.get(url)
    
    # Adicione verificação da resposta
    if response.status_code == 200:
        try:
            # Exibir a resposta bruta para depuração
            print(f"Resposta bruta da API para o ID {movie_id}: {response.text}")
            data = response.json()
        except json.JSONDecodeError as e:
            print(f"Erro ao decodificar JSON para o ID {movie_id}: {e}")
            continue
        
        # Captura dos metadados necessários
        movie_data = {
            "id": movie_id,
            "title": data.get("title"),
            "overview": data.get("overview"),
            "poster_path": f'https://image.tmdb.org/t/p/w500{data.get("poster_path")}',
            "homepage": data.get("homepage")  # Substitua pelo URL real do vídeo
        }
        movies_data.append(movie_data)
    else:
        print(f"Erro na requisição para o ID {movie_id}: {response.status_code}")

# Salva os metadados em um arquivo JSON
with open('movies_metadata.json', 'w') as file:
    json.dump(movies_data, file, indent=4)
